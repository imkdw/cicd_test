# 이름 지정
name: Deploy hdev_server to AWS EC2

# Main 브랜치에 push 됬을때 해당 액션 실행
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # ubuntu 최신버전에서 실행됨
    runs-on: ubuntu-latest

    steps:
      # 기존 repository의 코드 체크아웃
      - name: 코드 체크아웃
        id: checkout-code
        uses: actions/checkout@v3

      - name: AWS IAM 사용자 설정
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the Docker image
        id: build-docker-image
        run: |
          docker build -t cicd-test .

      - name: Push the Docker image to Amazon ECR
        id: push-image
        run: |
          docker tag cicd-test ${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:${{ github.sha }}
          echo "${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: SSH into EC2 instance and pull the Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ steps.push-image.outputs.image_url }}

      - name: Start the Docker container on EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker stop cicd-test || true
            docker rm cicd-test || true
            docker run -d --name cicd-test -p 80:3000 ${{ steps.push-image.outputs.image_url }}
